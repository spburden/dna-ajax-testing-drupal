<?php
/**
 * @file
 * Tests for DNAHelix Module.
 */
class DNAHelixFunctionalTests extends DrupalWebTestCase
{
    public static function getInfo()
    {
        return array(
            'name' => 'DNA Helix Functional Tests',
            'description' => 'Functional Tests for the DNA Helix module.',
            'group' => 'Stephen Burden Tests',
        );
    }

    public function setUp()
    {
        // enable the module.
        parent::setUp(array('dna_helix'));
    }

    public function testHelixHalf()
    {
         // We want to navigate to the helix form, add some good values, submit it and make sure the output is displayed.
        // Navigate to /dna_helix.
        $this->drupalGet('dna_helix');

        // Verify that the form exists.
        $this->assertText("DNA Helix Pairer", 'Form displayed!');

        /// Insert a valid letter.
        $form['helix_half'] = 'a';

        // Submit Form.
        $this->drupalPost('dna_helix', $form, t('Pair!'));

        // Verify correct result.
        $this->assertText('T', 'Output displayed!');
    }

    public function testInvalidInput()
    {
         // We want to navigate to the helix form, add some good values, submit it and make sure the output is displayed.
        // Navigate to /dna_helix.
        $this->drupalGet('dna_helix');

        // Verify that the form exists.
        $this->assertText("DNA Helix Pairer", 'Form displayed!');

        /// Insert a invalid character.
        $form['helix_half'] = 'b';

        // Submit Form.
        $this->drupalPost('dna_helix', $form, t('Pair!'));

        // Verify correct result.
        $this->assertText("The only characters that are allowed in your helix half are the letters: 'A', 'C', 'G', or 'T'.", 'INVALID Input Value!');
    }
}

class DNAHelixUnitTests extends DrupalUnitTestCase
{
    public static function getInfo()
    {
        return array(
            'name' => 'DNA Helix Unit Tests',
            'description' => 'Unit Tests for the DNA Helix module.',
            'group' => 'Stephen Burden Tests',
        );
    }

    function testEncrypt()
   {
      // pair 1 helix (with lower case)
      $description = 'Successfully paired 1 word';
      $helix_half = 'a';
      $output = pairHelix($helix_half);
      $expected_output = 'T';
      $this->assertEqual($output, $expected_output, $description);

      // pair more than 1 helix
      $description = 'Successfully paired 2 words';
      $helix_half = 'ATAAGC';
      $output = pairHelix($helix_half);
      $expected_output = 'TATTCG';
      $this->assertEqual($output, $expected_output, $description);
   }
}
